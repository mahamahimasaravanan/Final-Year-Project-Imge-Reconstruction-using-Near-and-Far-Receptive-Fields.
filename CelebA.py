# -*- coding: utf-8 -*-
"""Copy of Main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g8_eYWgjWwY6vrnG78YAQHSbIC3bgk9f
"""

from google.colab import drive
drive.mount('/content/drive')



cd /content/drive/MyDrive/IMAGE_NEW/

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
# %matplotlib inline
from mpl_toolkits.axes_grid1 import ImageGrid
from utils.DataGenerator import Generator
from models.LGRefinementNet.LGRNet import LGRNet, dice_coef
import os
import glob
import cv2
import numpy as np

SIZE = 128

img_dir = "dataset" # Enter Directory of all images
data_path = os.path.join(img_dir,'*.jpg')
files = glob.glob(data_path)
print(files)
data = []

for f1 in files:
    img = cv2.imread(f1, cv2.IMREAD_COLOR)
    img = cv2.resize(img, (SIZE, SIZE))
    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
    data.append(img)

data = np.array(data)

from sklearn.model_selection import train_test_split
xtrain,xtest=train_test_split(data, test_size=0.3)

trainGenerator = Generator(xtrain, xtrain, shuffle=True)
testGenerator = Generator(xtest, xtest, shuffle=False)

nSamples=19
[maskedImages, masks], originalImages = trainGenerator[nSamples]
previewImage = [None]*(len(maskedImages)+len(masks)+len(originalImages))

previewImage[::3] = originalImages
previewImage[1::3] = masks
previewImage[2::3] = maskedImages

fig = plt.figure(figsize=(17., 8.))
grid = ImageGrid(fig, 111, nrows_ncols=(4, 9), axes_pad=0.3)

for ax, image in zip(grid, previewImage):
  ax.imshow(image)

plt.show()

keras.backend.clear_session()
model = LGRNet().prepare_model()
model.summary()
model.compile(optimizer='adam', loss='mean_absolute_error', metrics=[dice_coef])

_ = model.fit(trainGenerator, validation_data=testGenerator,
          epochs=30,
          steps_per_epoch=len(trainGenerator),
          validation_steps=len(testGenerator),
          use_multiprocessing=True)

model.save('model.h5')

testCases = 32
inp_image=[]
from google.colab import files
[masked_images, masks], sample_labels = testGenerator[54]
fig, axs = plt.subplots(nrows=testCases, ncols=4, figsize=(8, 2*testCases))
for i in range(testCases):
  inputs = [masked_images[i].reshape((1,)+masked_images[i].shape), masks[i].reshape((1,)+masks[i].shape)]
  impainted_image = model.predict(inputs)
  axs[i][0].imshow(masked_images[i])
  axs[i][1].imshow(masks[i])
  #inp_image[i].append(impainted_image.reshape(impainted_image.shape[1:]))
  axs[i][2].imshow(impainted_image.reshape(impainted_image.shape[1:]))
  axs[i][3].imshow(sample_labels[i])
  #inpainted_image.savefig("file.jpg",dpi=300)
  #files.download("file.jpg")
  #inp_image[i].figure.savefig('/content/gen_img/img'+str(i)+'.jpg',dpi=300)
  #axs[i][2].to_jpg("/content/gen_img/axs.jpg")
 # axs[i][3].to_jpg("/content/ori_img/axs.jpg")

plt.show()
# Image With Mask || Mask || Generated Image || Original Image

from keras.preprocessing import image

model = load_model('model.h5')

img=image.load_img